type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CreditCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=8722',
                        '--periods=120',
                        '--interest=5.6',
                    ],
                    attach=('principal', 800018, 246622),
                ),
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=6898',
                        '--periods=240',
                        '--interest=3.4',
                    ],
                    attach=('principal', 1199997, 455523),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=8',
                        '--interest=9.8',
                    ],
                    attach=('payment', 129638, 37104),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=60',
                        '--interest=10',
                    ],
                    attach=('payment', 274880, 21248),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=500000',
                        '--payment=23000',
                        '--interest=7.8',
                    ],
                    attach=('periods', 52000, 24),
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=1000000',
                        '--periods=10',
                        '--interest=10',
                    ],
                    attach=[
                        108334,
                        107500,
                        106667,
                        105834,
                        105000,
                        104167,
                        103334,
                        102500,
                        101667,
                        100834,
                        45837,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=500000',
                        '--periods=8',
                        '--interest=7.8',
                    ],
                    attach=[
                        65750,
                        65344,
                        64938,
                        64532,
                        64125,
                        63719,
                        63313,
                        62907,
                        14628,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--payment=104000',
                    ],
                    attach='Incorrect',
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=-1000000',
                        '--payment=104000',
                        '--periods=8',
                    ],
                    attach='Incorrect',
                ),

            ]

        def check(self, reply, attach):
            if attach == 'Incorrect':
                if attach.lower() in reply.lower():
                    return CheckResult.correct()

                return CheckResult.wrong(
                    'Parameters are incorrect. '
                    'Just output "Incorrect parameters"'
                )

            numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
            if len(numbers) == 0:
                return CheckResult.wrong(
                    'No numbers in the answer',
                )

            if isinstance(attach, tuple):
                if attach[0] == 'periods':
                    years = int(attach[2] / 12)
                    months = str(int(attach[2] % 12))
                    for i in numbers:
                        if abs(attach[1] - float(i)) < 2:
                            if str(months) in numbers or str(years) in numbers:
                                return CheckResult.correct()

                    if years == 0:
                        output = (
                            'Looks like your periods '
                            'calculations aren\'t working properly. '
                            'Correct months and overpayment are '
                            '[ {0}, {1} ]'
                            ', but you output: {2}'
                        )
                        return CheckResult.wrong(
                            output.format(attach[2], attach[1], numbers),
                        )
                    else:
                        if months != '0':
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years, months and overpayment are '
                                '[ {0}, {1}, {2} ]'
                                ', but you output: {3}'
                            )
                            return CheckResult.wrong(
                                output.format(years, months, attach[1], numbers),
                            )
                        else:
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years and overpayment are '
                                '[ {0}, {1} ]'
                                ', but you output: {2}'
                            )
                            return CheckResult.wrong(
                                output.format(years, attach[1], numbers),
                            )
                for i in numbers:
                    if not abs(attach[1] - float(i)) < 2:
                        if not abs(attach[2] - float(i)) < 2:
                            if attach[0] == 'payment':
                                output = (
                                    'Looks like your annuity payments '
                                    'calculations aren\'t working properly. '
                                    'Correct annuity payment and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            else:
                                output = (
                                    'Looks like your credit principal '
                                    'calculations aren\'t working properly. '
                                    'Correct credit principal and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            return CheckResult.wrong(
                                output.format(attach[2], attach[1], numbers),
                            )

                return CheckResult.correct()

            if isinstance(attach, list):
                if (len(numbers) + 1) / 2 < len(attach):
                    user_numbers = numbers[1::2]
                    if numbers[-1] not in user_numbers:
                        user_numbers.append(numbers[-1])
                    return CheckResult.wrong(
                        'Not enough values for diff payment in the answer '
                        'must be {0} with overpayment {1}, but you output: {2}'
                        .format(attach[:-1], attach[-1], user_numbers)
                    )

                for figure in attach:
                    flag = False
                    for number in numbers:
                        if abs(float(number) - figure) < 2:
                            flag = True
                            break
                    if flag is False:
                        user_numbers = numbers[1::2]
                        if numbers[-1] not in user_numbers:
                            user_numbers.append(numbers[-1])
                        return CheckResult.wrong(
                            'Incorrect result '
                            'must be {0} with overpayment {1}, but you output: {2}'
                            .format(attach[:-1], attach[-1], user_numbers)
                        )

            return CheckResult.correct()


    if __name__ == '__main__':
        CreditCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
- name: creditcalc/creditcalc.py
  visible: true
  text: "import math\n\n\ndef get_principal(a: float, i: float, n: int) -> int:\n\
    \    \"\"\"\n    a -- annuity payment\n    i -- nominal (monthly) interest rate\n\
    \    n -- number of payments\n    \"\"\"\n    return round(a / ((i * (1 + i) **\
    \ n) / ((1 + i) ** n - 1)))\n\n\ndef get_number_of_payments(p: int, a: float,\
    \ i: float) -> int:\n    \"\"\"\n    p -- credit principle\n    a -- annuity payment\n\
    \    i -- nominal (monthly) interest rate\n    \"\"\"\n    return math.ceil(math.log(a\
    \ / (a - i * p), 1 + i))\n\n\ndef get_monthly_payment(p: int, i: float, n: int)\
    \ -> int:\n    \"\"\"\n    p -- credit principle\n    i -- nominal (monthly) interest\
    \ rate\n    n -- number of payments\n    \"\"\"\n    return math.ceil(p * (i *\
    \ (1 + i) ** n) / ((1 + i) ** n - 1))\n\n\ndef get_last_payment(p: int, i: float,\
    \ n: int) -> int:\n    \"\"\"\n    p -- credit principle\n    i -- nominal (monthly)\
    \ interest rate\n    n -- number of payments\n    \"\"\"\n    return p - n * get_monthly_payment(p,\
    \ i, n)\n\n\ndef get_year_and_month_string(years: int, months: int) -> str:\n\
    \    years_s = f\"{years} year{'' if years % 10 == 1 else 's'}\"\n    months_s\
    \ = f\"{months} month{'' if months % 10 == 1 else 's'}\"\n    result = ''\n  \
    \  if years:\n        result += years_s\n    if years and months:\n        result\
    \ += ' and '\n    if months:\n        result += months_s\n    return result\n\n\
    \nprint('''What do you want to calculate? \ntype \"n\" - for count of months,\
    \ \ntype \"a\" - for annuity monthly payment,\ntype \"p\" - for credit principal:''')\n\
    \nprincipal_inp = 0\nannuity_inp = 0\nperiods_inp = 0\nnumber_of_payments_inp\
    \ = 0\n\nt = input().strip()\n\nif t != 'p':\n    print(\"Enter credit principal:\"\
    )\n    principal_inp = int(input())\nif t != 'a':\n    print(\"Enter monthly payment:\"\
    )\n    annuity_inp = float(input())\nif t != 'n':\n    print(\"Enter count of\
    \ periods:\")\n    periods_inp = int(input())\nprint(\"Enter credit interest:\"\
    )\nnumber_of_payments_inp = float(input()) * 0.01 / 12\n\nif t == 'n':\n    periods\
    \ = get_number_of_payments(principal_inp,\n                                  \
    \   annuity_inp,\n                                     number_of_payments_inp)\n\
    \    result_string = get_year_and_month_string(periods // 12, periods % 12)\n\
    \    print(f\"You need \"\n          f\"{result_string}\"\n          f\" to repay\
    \ this credit!\")\nelif t == 'a':\n    annuity = get_monthly_payment(principal_inp,\n\
    \                                  number_of_payments_inp,\n                 \
    \                 periods_inp)\n    print(f\"Your annuity payment = \"\n     \
    \     f\"{annuity}!\")\nelif t == 'p':\n    principal = get_principal(annuity_inp,\
    \ number_of_payments_inp, periods_inp)\n    print(f\"Your credit principal = \"\
    \n          f\"{principal}!\")\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/90/stages/503/implement
status: Solved
record: -1
